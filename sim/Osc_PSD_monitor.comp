/*
 * Pixelated oscillation monitor.
 *
 * Author: Tobias Weber
 * based on 1) Osc_monitor.comp (by Georg Brandl)
 * 		which itself is based on TOF_monitor.comp (by KN, M. Hagen)
 * 2) PSD_monitor_4PI.comp (by Kim Lefmann and Kristian Nielsen)
 * 3) Osc_monitor_ring.comp
 */

DEFINE COMPONENT Osc_PSD_monitor
DEFINITION PARAMETERS (int nchan=16, int nx=32, int ny=32)

// period is in 1/Hz = s
SETTING PARAMETERS (	string filename,
			int geo=0,			/* 0: flat, 1: spherical */
		  	double period=0.0,

			    /* flat stuff */
			double xmin=0.0, double xmax=0.0,
			double ymin=0.0, double ymax=0.0,
			double xwidth=0.1, double yheight=0.1,
			double thickness=0.0,

			/* sphere stuff */
			double radius=1.0,
			double phimin=-180.0, double phimax=180.0,
			double thetamin=-90.0, double thetamax=90.0,

			int restore_neutron=0,
			int do_anything=1		/* hack to stop storing empty files */
    )
OUTPUT PARAMETERS (TOF_N, TOF_p, TOF_p2)

DECLARE
%{
	double TOF_N[nx][ny][nchan];
	double TOF_p[nx][ny][nchan];
	double TOF_p2[nx][ny][nchan];
%}

INITIALIZE
%{
	if (do_anything) {
		if(geo!=0 && geo!=1) {
			fprintf(stderr, "Osc_PSD_monitor: Invalid geometry (\"geo=%d\") selected!\n", geo);
			exit(-1);
		}

		if (ymin > ymax) {
			// swap
			double ytmp = ymin;
			ymin = ymax;
			ymax = ytmp;
		}
	if (xmin > xmax) {
			// swap
			double xtmp = xmin;
			xmin = xmax;
			xmax = xtmp;
		}
		if (thetamin > thetamax) {
			// swap
			double tmp = thetamin;
			thetamin = thetamax;
			thetamax = tmp;
		}
		if (phimin > phimax) {
			// swap
			double tmp = phimin;
			phimin = phimax;
			phimax = tmp;
		}

		if (yheight > 0) {
			ymax = yheight/2;
			ymin = -ymax;
		} else {
			yheight = ymax-ymin;
		}
		if (xwidth > 0) {
			xmax = xwidth/2;
			xmin = -xmax;
		} else {
			xwidth = xmax-xmin;
		}

		int ix, iy, ichan;
		for (ichan = 0; ichan < nchan; ++ichan) 
		for (iy = 0; iy < ny; ++iy)
		for (ix = 0; ix < nx; ++ix)
		{
			TOF_N[ix][iy][ichan] = 0;
			TOF_p[ix][iy][ichan] = 0;
			TOF_p2[ix][iy][ichan] = 0;
		}
	}
%}

TRACE
%{
	if (do_anything) {
		double rnd_t = 0.;

		if(thickness != 0.0)
		{
			const double r01 = rand01();
			const double v = sqrt(vx*vx + vy*vy + vz*vz);

			rnd_t = r01*thickness/v;
		}


		// the time the neutron intersects the plane
		double t0=-1., t1=-1.;
		int bDoesIntersect = 0;

		if (geo == 0) {               // plane geometry
			bDoesIntersect = plane_intersect(&t0, x, y, z, vx, vy, vz, 0., 0., 1., 0., 0., 0.);
			if (t0 < 0.)
				bDoesIntersect = 0;
		} else if (geo == 1) {       // spherical geometry
			bDoesIntersect = sphere_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius);
			if (t1 < 0.)
				bDoesIntersect = 0;

			if (t0 < 0.)
				t0 = t1;
		}

		if (bDoesIntersect) {
			// propagate neutron to intersection point
			// plus some random offset caused by the detector thickness
			PROP_DT(t0 + rnd_t);

			int iXBin, iYBin;
			int bIsDetected = 0;

			if (geo == 0) {         // plane geometry
				// are we inside the detector area?
				if(x>xmin && x<xmax && y>ymin && y<ymax) {
					bIsDetected = 1;

					// which pixel corresponds to this position?
					iXBin = floor(nx * (x-xmin)/xwidth);
					iYBin = floor(ny * (y-ymin)/yheight);
				}
			} else if (geo == 1) {  // spherical geometry
				double dPhi = atan2(x, z) / PI * 180.;
				double dTheta = asin(y/radius) / PI * 180.;

				// are we inside the detector area?
				if (dPhi>phimin && dPhi<phimax && dTheta>thetamin && dTheta<thetamax) {
					bIsDetected = 1;

					// which pixel corresponds to these angles?
					iXBin = floor(nx*(dPhi-phimin)/(phimax-phimin));
					iYBin = floor(ny*(dTheta-thetamin)/(thetamax-thetamin));
				}
			}

			if (bIsDetected) {
				if (iXBin >= nx)
					iXBin = nx-1;
				else if (iXBin < 0)
					iXBin = 0;

				if (iYBin >= ny)
					iYBin = ny-1;
				else if (iYBin < 0)
					iYBin = 0;

				// main difference between Osc and TOF monitors
				//printf("%f ", t);
				double tof = fmod(t, period);

				// in which TOF bin are we?
				int iTofBin = floor(nchan * tof / period);

				if (iTofBin >= nchan)
					iTofBin = nchan-1;
				else if (iTofBin < 0)
					iTofBin = 0;

				TOF_N[iXBin][iYBin][iTofBin]++;
				TOF_p[iXBin][iYBin][iTofBin] += p;
				TOF_p2[iXBin][iYBin][iTofBin] += p*p;

				SCATTER;
			}
		}

		if (restore_neutron) {
			RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
		}
	}
%}

SAVE
%{
	if (do_anything) {

		// calculate total TOF signal
		double TOF_N_total[nchan];
		double TOF_p_total[nchan];
		double TOF_p2_total[nchan];

		int ix, iy, ichan;

		for (ichan=0; ichan<nchan; ++ichan)
		{
			double dChanN = 0.;
			double dChanp = 0.;
			double dChanp2 = 0.;

			for (ix = 0; ix < nx; ++ix)
			for (iy = 0; iy < ny; ++iy)
			{
				dChanN += TOF_N[ix][iy][ichan]; 
				dChanp += TOF_p[ix][iy][ichan]; 
				dChanp2 += TOF_p2[ix][iy][ichan]; 
			}

			TOF_N_total[ichan] = dChanN;
			TOF_p_total[ichan] = dChanp;
			TOF_p2_total[ichan] = dChanp2;
		}



		double dMinX, dMaxX, dMinY, dMaxY;
		char *pcXLabel, *pcYLabel;

		if (geo == 0) {            // plane
			dMinX = xmin*100.;
			dMaxX = xmax*100.;
			dMinY = ymin*100.;
			dMaxY = ymax*100.;

			pcXLabel = "x position [cm]";
			pcYLabel = "y position [cm]";
		} else if (geo == 1) {     // spherical
			dMinX = phimin;
			dMaxX = phimax;
			dMinY = thetamin;
			dMaxY = thetamax;

			pcXLabel = "\\gf [deg]";	// phi
			pcYLabel = "\\gh [deg]";	// theta
		}

		DETECTOR_OUT_3D(
			"Osc PSD monitor",        // t
			pcXLabel,                 // xl
			pcYLabel,                 // yl
			"time slice [\\gms]",     // zl
			pcXLabel,                 // xvar
			pcYLabel,                 // yvar
			"t [\\gms]",              // zvar
			dMinX, dMaxX,             // x1, x2
			dMinY, dMaxY,             // y1, y2
			0, 1e6*period,            // z1, z2
			nx, ny, nchan,            // m, n, p
			&TOF_N[0][0][0], &TOF_p[0][0][0], &TOF_p2[0][0][0],	// p0, p1, p2
			filename                  // f
		);


		
		// output total TOF signal
		char filename_1d[256];
		sprintf(filename_1d, "%s_1d", filename);

		DETECTOR_OUT_1D("Osc monitor",
				"Time slice [\\gms]",
				"Intensity",
				"t", 0, 1e6*period, 
				nchan,
				TOF_N_total, TOF_p_total, TOF_p2_total,
				filename_1d);
	}
%}

MCDISPLAY
%{
    if (geo == 0) {
		// display code taken from PSD_monitor.comp
		magnify("xy");
		multiline(5, (double)xmin, (double)ymin, 0.0,
					(double)xmax, (double)ymin, 0.0,
					(double)xmax, (double)ymax, 0.0,
					(double)xmin, (double)ymax, 0.0,
					(double)xmin, (double)ymin, 0.0);
	} else if (geo == 1) {
		magnify("");
		circle("xz",0,0,0,radius);
	}
%}

END
