#!./hermelin

__init__()
{
	global INSTR = "tasmieze";
	global num_neutrons = 1e6;

	import("mcstas.scr");
	import("sim.scr");
	import("mieze.scr");
	import("colors.scr");
}

main()
{
#	global NUM_THREADS = 1;
	do_compile = 0;

	L_sample_ana = 0.5;
	L_ana_det = 0.5;
	L_mono_sample = 2.;
	L_mono_mieze = 0.5;

	L1 = 0.9;
	Ls = L_sample_ana + L_ana_det;
	L2 = Ls + L_mono_sample - L1 - L_mono_mieze;
	lam = 4.;		# A
	dlam = lam/25.;
	tau = 25.;		# ps

	f1f2 = mieze_f1f2(L1, L2, Ls, lam, tau);

	
	if(do_compile)
	{
		mcclean(INSTR);
		if(not mccompile(INSTR))
			return;
	}


	#anadepths = logspace(log10(0.0001), log10(0.01), 15);
	anadepths = linspace(0.0001, 0.01, 16);
	indices = linspace(0, vec_size(anadepths)-1, vec_size(anadepths));
	global contrasts = vec(vec_size(anadepths));
	global contrasts_err = vec(vec_size(anadepths));

	print("Analyser depths: " + str(anadepths));

	simBaseParams = "dLam=" + lam 
			+ " dDeltaLam=" + dlam 
			+ " dMiezeF1=" + f1f2[0] 
			+ " dMiezeF2=" + f1f2[1]
			+ " dMiezeL1=" + L1
			+ " dDistMonoMieze=" + L_mono_mieze
			+ " dDistMonoSample=" +  L_mono_sample
			+ " dDistSampleAna=" + L_sample_ana
			+ " dDistAnaDet=" + L_ana_det;

	print("\n\n");
	print("="*80);
	print(BLUE + "Starting simulation in " + NUM_THREADS + " threads." + NOCOLOR);
	print("\n");


	threads = nthread(NUM_THREADS, "run_thread", zip(indices, anadepths), "dAnaDepth", simBaseParams);
	join(threads);

	print("\n");
	print(GREEN + "All thread runs have finished." + NOCOLOR);
	print("="*80);


	print("Analyser thicknesses: " + str(anadepths));
	print("Contrasts: " + str(contrasts));
	
	params = map();
	params["xlabel"] = "Analyser Thickness (mm)";
	params["ylabel"] = "Contrast";
	params["title"] = "Result";
	params["xlimits"] = 1000.*min(anadepths) + " " + 1000.*max(anadepths);
	params["ylimits"] = "0 1";
	params["term"] = "x11";

	#print(params);
	plot(anadepths*1000., contrasts, contrasts_err, params);
}
