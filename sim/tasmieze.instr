/*
 * new TAS-MIEZE instrument
 * @author tweber
 * @date 25-nov-13
 */

DEFINE INSTRUMENT TasMieze
(
	// source
	double dLam = 5.0, 
	double dDeltaLam = 0.1,

	// MIEZE
	double dMiezeL1 = 0.9,
	double dMiezeF1 = 46000.0, 
	double dMiezeF2 = 61920.0,
	double dDistMonoMieze = 0.5,

	// mono
	double dMonoTheta = 0.0,

	// sample
	// 001: C Single_crystal
	// 100: Phonon_simple
	int iSample = 1,
	double dDistMonoSample = 2.0,
	double dSampleTheta = 0.0, 
	double dSampleTwoTheta = 0.0,

	// analyser
	double dAnaTheta=0.0,
	double dAnaDepth = 0.001,
	double dDistSampleAna = 1.0,

	// detector
	double dDistAnaDet = 1.0,
	double dDetOffs = 0.0,

	// 1: calculate TAS angles internally
	// 0: calculate TAS angles externally
	int bAutoSetAngles = 1
)


DECLARE
%{
	int bAbsorbNonScattered = 1;

	// monochromator
	bool bMonoIdeal = 0;
	double dMonoD = 6.79;
	double dDistSrcMono = 1.;
	double dMonoWidth = 0.005, dMonoHeight = 0.005, dMonoDepth = 0.001;
	double dMonoMosaic = 10.0;

	// sample
	double dSampleD = 6.79;
	double dSampleWidth = 0.05, dSampleHeight = 0.05, dSampleDepth = 0.001;
	
	double dTargetSampleAna[3];

	// analyser
	bool bAnaIdeal = 0;
	double dAnaD = 6.79;
	double dAnaWidth = 0.05, dAnaHeight = 0.05;
	double dAnaMosaic = 10.0;

	// MIEZE
	bool bMiezeIdeal = 1;
	double dMiezeWidth = 0.35, dMiezeHeight = 0.35;
	double dMiezeCoilThick = 0.;
	double dMiezeCoilTilt = 0.;
	
	int iMiezeNumCoils = 1;
	double dMiezeNumOsc = 2.;
	double dMiezeFm = -1.;

	// detector
	double dDetWidth = 0.4, dDetHeight = 0.4;
	double dDetTofBase = 0.;
	
	double E_i;
%}



INITIALIZE
%{
	double v_i = HBAR*2.*M_PI / (dLam*1e-10 * MNEUTRON);
	E_i = VS2E*v_i*v_i;

	if(bAutoSetAngles)
	{
		double dMonoScatterSense = 1.;
		double dMonoOrder = 2.;
		dMonoTheta = dMonoScatterSense*asin(dMonoOrder*dLam / (2.*dMonoD)) / M_PI * 180.;

		double dSampleScatterSense = -1.;
		double dSampleOrder = 2.;
		dSampleTheta = dSampleScatterSense*asin(dSampleOrder*dLam / (2.*dSampleD)) / M_PI * 180.;
		dSampleTwoTheta = dSampleTheta * 2.;

		double dAnaScatterSense = 1.;
		double dAnaOrder = 2.;
		dAnaTheta = dAnaScatterSense*asin(dAnaOrder*dLam / (2.*dAnaD)) / M_PI * 180.;
	}

	dTargetSampleAna[0] = sin((dSampleTwoTheta-dSampleTheta)/180.*M_PI) * dDistSampleAna;
	dTargetSampleAna[1] = 0.;
	dTargetSampleAna[2] = cos((dSampleTwoTheta-dSampleTheta)/180.*M_PI) * dDistSampleAna;


	printf("--------------------------------------------------------------------------------\n");
	printf("Source: lam_i=%f A, v_i=%f m/s, E_i=%f meV\n", dLam, v_i, E_i);
	printf("Monochromator: theta_m=%f deg, 2theta_m=%f deg\n", dMonoTheta, 2.*dMonoTheta);
	printf("Sample: theta_s=%f deg, 2theta_s=%f deg\n", dSampleTheta, dSampleTwoTheta);
	printf("Analyser: theta_a=%f deg, 2thetaa_=%f deg\n", dAnaTheta, 2.*dAnaTheta);


	double dv = 2.*M_PI*HBAR / (dLam*1e-10) / MNEUTRON;
	dDetTofBase = (dDistSrcMono + dDistMonoSample + dDistSampleAna + dDistAnaDet + dDetOffs) / dv;

	dMiezeFm = 2.*double(iMiezeNumCoils)*(dMiezeF2 - dMiezeF1);

	double dMiezeLs = dDistSampleAna + dDistAnaDet;
	double dMiezeL2 = dMiezeLs + dDistMonoSample - dMiezeL1 - dDistMonoMieze;
	double dMiezeLb = dMiezeL2 - dMiezeLs;

	// for Mieze Box component: Origin is at center
	dDistMonoMieze += dMiezeL1/2.;

	printf("MIEZE: L1=%f m, L2=%f m, Ls=%f m, Lb=%f m, f1=%f Hz, f2=%f Hz, offs=%f m\n", 
		dMiezeL1, dMiezeL2, dMiezeLs, dMiezeLb, dMiezeF1, dMiezeF2, dDetOffs);
	printf("--------------------------------------------------------------------------------\n");
%}






TRACE

COMPONENT Origin = Progress_bar()
	 	AT (0,0,0) ABSOLUTE



//----------------------------------------------------------------------------------------------------
// source

COMPONENT Source = Source_simple(
	yheight = 0.01, xwidth = 0.01, focus_xw = dMonoWidth*0.5, focus_yh = dMonoHeight*0.5,
	lambda0 = dLam, dlambda = dDeltaLam, gauss = 1, dist = dDistSrcMono)
		AT (0, 0, 0) RELATIVE Origin
		EXTEND
		%{
			//t = 0.;
			t = rand01() * dMiezeNumOsc/dMiezeFm;
		%}
//----------------------------------------------------------------------------------------------------




//----------------------------------------------------------------------------------------------------
// monochromator

COMPONENT MonoAxisBegin = Arm()
	AT (0, 0, dDistSrcMono) RELATIVE Source

COMPONENT Mono_flat = Monochromator_flat(
	zwidth = dMonoWidth, yheight = dMonoHeight, mosaich = dMonoMosaic, mosaicv = dMonoMosaic,
	r0 = 1, DM = dMonoD)
		WHEN(bMonoIdeal == 1)
  		AT (0, 0, 0) RELATIVE MonoAxisBegin
	  	ROTATED (0, dMonoTheta, 0) RELATIVE MonoAxisBegin
		EXTEND
		%{
			if(bAbsorbNonScattered && !SCATTERED)
				ABSORB;
		%}

COMPONENT Mono_crystal = Single_crystal(
	reflections = "C_graphite.lau", 
	xwidth = dMonoWidth, yheight = dMonoHeight, zdepth = dMonoDepth, 
	delta_d_d = 1e-4, mosaic = dMonoMosaic, recip_cell = 0, barns = 0, 
	ax = 2.464, ay = 0, az = 0, 
	bx = 0, by = 2.464, bz = 0, 
	cx = 0, cy = 0, cz = dMonoD,
	aa = 0, bb = 0, cc = 120,
	sigma_abs = 0.0035, sigma_inc = 0.001, 
	order = 0, RX = 0, RY = 0, RZ = 0)
		WHEN(bMonoIdeal == 0)
		AT (0, 0, 0) RELATIVE MonoAxisBegin
		ROTATED (0, 90+dMonoTheta, 0) RELATIVE MonoAxisBegin
		EXTEND
		%{
			if(bAbsorbNonScattered && !SCATTERED)
				ABSORB;
		%}


COMPONENT MonoAxisEnd = Arm()
	AT (0, 0, 0) RELATIVE MonoAxisBegin
	ROTATED (0, 2.0*dMonoTheta, 0) RELATIVE MonoAxisBegin



//----------------------------------------------------------------------------------------------------




//----------------------------------------------------------------------------------------------------
// MIEZE
COMPONENT MiezeBox = MIEZE_box(N=1,
	xwidth = dMiezeWidth, yheight = dMiezeHeight, 
	L1 = dMiezeL1,
	f1 = dMiezeF1, f2 = dMiezeF2, coil_thickness = dMiezeCoilThick,
	coil_tilt = dMiezeCoilTilt)
		WHEN(bMiezeIdeal == 1)
		AT (0, 0, dDistMonoMieze) RELATIVE MonoAxisEnd
		EXTEND
		%{
			if(bAbsorbNonScattered && !SCATTERED)
				ABSORB;
		%}


//----------------------------------------------------------------------------------------------------





//----------------------------------------------------------------------------------------------------
// sample

COMPONENT SampleAxisBegin = Arm()
	AT (0, 0, dDistMonoSample) RELATIVE MonoAxisEnd


COMPONENT Sample_crystal_C = Single_crystal(
	reflections = "C_graphite.lau", 
	xwidth = dSampleWidth, yheight = dSampleHeight, zdepth = dSampleDepth, 
	delta_d_d = 1e-4, mosaic = 10, recip_cell = 0, barns = 0, 
	ax = 2.464, ay = 0, az = 0, 
	bx = 0, by = 2.464, bz = 0, 
	cx = 0, cy = 0, cz = dSampleD,
	aa = 0, bb = 0, cc = 120,
	sigma_abs = 0.0035, sigma_inc = 0.001, 
	order = 0, RX = 0, RY = 0, RZ = 0)
		WHEN(iSample == 1)
		AT (0, 0, 0) RELATIVE SampleAxisBegin
		ROTATED (0, 90+dSampleTheta, 0) RELATIVE SampleAxisBegin
		EXTEND
		%{
			if(bAbsorbNonScattered && !SCATTERED)
				ABSORB;
		%}

COMPONENT Sample_phonon = Phonon_simple(
	radius = dSampleWidth, yheight = dSampleHeight,
	//target_index = +4, focus_r=dAnaWidth/2.0,
	target_x = dTargetSampleAna[0], target_y = dTargetSampleAna[1], target_z = dTargetSampleAna[2],
	focus_xw = dAnaWidth, focus_yh = dAnaHeight,
	a=5, b=0.9, M=100, c=5, DW=1, T=300, sigma_abs=0.01, sigma_inc=0.001)
		WHEN(iSample == 100)
		AT (0, 0, 0) RELATIVE SampleAxisBegin
		ROTATED (0, dSampleTheta, 0) RELATIVE SampleAxisBegin
//		EXTEND
//		%{
// no SCATTER in component!
//			if(bAbsorbNonScattered && !SCATTERED)
//				ABSORB;
//		%}


COMPONENT SampleAxisEnd = Arm()
	AT (0, 0, 0) RELATIVE SampleAxisBegin
	ROTATED (0, dSampleTwoTheta, 0) RELATIVE SampleAxisBegin

//----------------------------------------------------------------------------------------------------





//----------------------------------------------------------------------------------------------------
// analyser

COMPONENT AnaAxisBegin = Arm()
	AT (0, 0, dDistSampleAna) RELATIVE SampleAxisEnd

COMPONENT E_mon = E_monitor(
	xwidth = dAnaWidth, yheight = dAnaHeight,
	nE = 256, filename = "E_mon_pre_ana",
	Emin = 0.0, Emax = E_i*2.0,
	restore_neutron = 1)
		AT (0,0,0) RELATIVE AnaAxisBegin

COMPONENT Ana_flat = Monochromator_flat(
	zwidth = dAnaWidth, yheight = dAnaHeight, mosaich = dAnaMosaic, mosaicv = dAnaMosaic,
	r0 = 1, DM = dAnaD)
		WHEN(bAnaIdeal == 1)
  		AT (0, 0, 0) RELATIVE AnaAxisBegin
	  	ROTATED (0, dAnaTheta, 0) RELATIVE AnaAxisBegin
		EXTEND
		%{
			if(bAbsorbNonScattered && !SCATTERED)
				ABSORB;
		%}

COMPONENT Ana_crystal = Single_crystal(
	reflections = "C_graphite.lau", 
	xwidth = dAnaWidth, yheight = dAnaHeight, zdepth = dAnaDepth, 
	delta_d_d = 1e-4, mosaic = dAnaMosaic, recip_cell = 0, barns = 0, 
	ax = 2.464, ay = 0, az = 0, 
	bx = 0, by = 2.464, bz = 0, 
	cx = 0, cy = 0, cz = dAnaD,
	aa = 0, bb = 0, cc = 120,
	sigma_abs = 0.0035, sigma_inc = 0.001, 
	order = 0, RX = 0, RY = 0, RZ = 0)
		WHEN(bAnaIdeal == 0)
		AT (0, 0, 0) RELATIVE AnaAxisBegin
		ROTATED (0, 90+dAnaTheta, 0) RELATIVE AnaAxisBegin
		EXTEND
		%{
			if(bAbsorbNonScattered && !SCATTERED)
				ABSORB;
		%}


COMPONENT AnaAxisEnd = Arm()
	AT (0, 0, 0) RELATIVE AnaAxisBegin
	ROTATED (0, 2.0*dAnaTheta, 0) RELATIVE AnaAxisBegin

//----------------------------------------------------------------------------------------------------




//----------------------------------------------------------------------------------------------------
// detector

COMPONENT DetAxis = Arm()
	AT (0, 0, dDistAnaDet + dDetOffs) RELATIVE AnaAxisEnd


/*
COMPONENT lam = L_monitor(
	nL = 64, filename = "lam", xwidth = dDetWidth, yheight = dDetHeight,
	Lmin = 0, Lmax = 10, restore_neutron = 1)
		AT (0, 0, 0) RELATIVE DetAxis
*/

COMPONENT psd = PSD_monitor(
	nx = 128, ny = 128, restore_neutron = 1, filename = "psd",
	xwidth = dDetWidth, yheight = dDetHeight)
		AT (0, 0, 0) RELATIVE DetAxis

COMPONENT tof = TOF_monitor(nt=128, 
		tmin=(dDetTofBase-dMiezeNumOsc/dMiezeFm)*1e6, 
		tmax=(dDetTofBase+dMiezeNumOsc/dMiezeFm)*1e6, 
	xwidth = dDetWidth, yheight = dDetHeight, 
	filename = "tof",
	restore_neutron = 1)
		AT (0, 0, 0) RELATIVE DetAxis

COMPONENT oscpsd = Osc_PSD_monitor(
	nchan=32, nx=64, ny=64, filename="oscpsd",
	xwidth = dDetWidth, yheight = dDetHeight, geo = 0,
	period = dMiezeNumOsc/dMiezeFm,
	restore_neutron = 1)
		AT (0, 0, 0) RELATIVE DetAxis

//----------------------------------------------------------------------------------------------------


FINALLY
%{
%}


END
