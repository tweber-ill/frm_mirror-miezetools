#!./hermelin

#
# Single invokation of tasmieze sim
# @author: tw
#

__init__()
{
#	global INSTR = "tasmieze";
	global INSTR = "tasmieze_nomono";
	global num_neutrons = 2e5;

	print("Running on " + interp_ver() + "\n");

	import("apps/mcstas.scr");
	import("apps/colors.scr");
	import("apps/phonon_1atom.scr");
	import("sim.scr");
}

run(simParams)
{
	dir = "output/single";

	if(mcrun(INSTR, num_neutrons, dir, simParams))
	{
		result = sim_evaluate(dir, 1);
		eval_Emon(dir, 0);
		print(YELLOW + "Result: " + str(result) + NOCOLOR);
		return result;
	}

	return 0.;
}

main()
{
	do_compile = 1;
	use_cpp = 0;

	lam = 5.;		# A
	dlam = 0.01 * lam;

	mono_ana_ideal = 0;
	mieze_ideal = 0;

	source_width = 0.001;
	det_width = 0.02;
	mono_ana_width = 0.005;
	mono_ana_mosaic = 30.0;
	sample_idx = 200;
	sample_width = 0.004;
	sample_depth = 0.002;
	sample_d = 1.0;
	sample_b = 1.0;
	sample_m = 1.0;
	sample_vel = 1.5;

	Q = 0.1;							# 1/A
	dE = 0.;							# meV

	print("Q = " + Q + " 1/A");
	print("E = " + dE + " meV");

	# -------------------------------------------------------------------------------- 
	# MIEZE stuff

	L_sample_ana = 0.5;
	L_ana_det = 0.5;
	L_mono_sample = 2.;
	L_mono_mieze = 0.5;

	L1 = 0.9;
	Ls = L_sample_ana + L_ana_det;
	L2 = Ls + L_mono_sample - L1 - L_mono_mieze;
	tau = 100.;		# ps

	f1f2 = mieze_f1f2(L1, L2, Ls, lam, tau);
	det_offs = mieze_det_offs(L1, L2-Ls, f1f2[0], f1f2[1], lam, -dE);

	print("Detector offset: " + det_offs + " m");
	# -------------------------------------------------------------------------------- 



	# -------------------------------------------------------------------------------- 
	# TAS stuff

	k_i = lam2k(lam);
	E_i = k2E(k_i);
	mono_tt = -angle_mono_tt(mono_d/mono_order, k_i);

	# sample_d = mono_d/mono_order;
	# Q = mono_Q(sample_d);

	E_f = E_i - dE;
	k_f = E2k(E_f);
	lam_f = E2lam(E_f);

	sample_tt = angle_sample_tt(k_i, k_f, Q);
	#sample_tt = mono_tt;

	ana_tt = -angle_mono_tt(ana_d/ana_order, k_f);

	emon_range = abs(dE*2.);
	# --------------------------------------------------------------------------------




	
	if(do_compile)
	{
		mcclean(INSTR);
		if(not mccompile(INSTR))
			return;
	}


	simBaseParams = "dLam=" + lam 
			+ " dDeltaLam=" + dlam 
			+ " dMiezeF1=" + f1f2[0] 
			+ " dMiezeF2=" + f1f2[1]
			+ " dMiezeL1=" + L1
			+ " dDistMonoMieze=" + L_mono_mieze
			+ " dDistMonoSample=" +  L_mono_sample
			+ " dDistSampleAna=" + L_sample_ana
			+ " dDistAnaDet=" + L_ana_det
			+ " dMonoTheta=" + mono_tt/2 /pi*180.
			+ " dAnaTheta=" + ana_tt/2 /pi*180.
			+ " dSampleTheta=" + sample_tt/2 /pi*180.
			+ " dSampleTwoTheta=" + sample_tt /pi*180.
			+ " bAutoSetAngles=0" 
			+ " iSample=" + sample_idx
			+ " dDetOffs=" + det_offs
			+ " dMonoD=" + mono_d
			+ " dAnaD=" + ana_d
			+ " dMonoOrder=" + mono_order
			+ " dAnaOrder=" + ana_order
			+ " dSampleWidth=" + sample_width
			+ " dSampleHeight=" + sample_width
			+ " dSampleDepth=" + sample_depth
			+ " dSampleD=" + sample_d
			+ " dSampleOrder=1.0"
			+ " dSampleB=" + sample_b
			+ " dSampleM=" + sample_m
			+ " dSamplePhononVel=" + sample_vel
			+ " dTemp=100"
			+ " dDeltaEMon=" + emon_range
			+ " dMonoWidth=" + mono_ana_width
			+ " dMonoHeight=" + mono_ana_width
			+ " dAnaWidth=" + mono_ana_width
			+ " dAnaHeight=" + mono_ana_width
			+ " dMonoMosaic=" + mono_ana_mosaic
			+ " dAnaMosaic=" + mono_ana_mosaic
			+ " bMonoIdeal=" + mono_ana_ideal
			+ " bAnaIdeal=" + mono_ana_ideal
			+ " bMiezeIdeal=" + mieze_ideal
			+ " dSourceWidth=" + source_width
			+ " dSourceHeight=" + source_width
			+ " dDetWidth=" + det_width
			+ " dDetHeight=" + det_width
			+ " dLam_f=" + lam_f;

	print("\n\n");
	print("="*80);
	print(BLUE + "Starting simulation..." + NOCOLOR);
	print("\n");


	result = run(simBaseParams);
}
