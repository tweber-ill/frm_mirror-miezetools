#!./hermelin

__init__()
{
	#global INSTR = "tasmieze";
	global INSTR = "tasmieze_nomono";
	global NUM_THREADS = thread_hwcount();
	print("CPU supports " + NUM_THREADS + " threads.\n");

	global num_neutrons = 1e5;

	print("Running on " + ver() + "\n");

	import("mcstas.scr");
	import("sim.scr");
	import("tas.scr");
	import("mieze.scr");
	import("colors.scr");
	import("phonon.scr");
}

main()
{
	do_compile = 1;

	lam = 4.;		# A
	dlam = 0.02 * lam;

	source_width = 0.001;
	det_width = 0.04;
	mono_ana_ideal = 1;
	mono_ana_width = 0.005;
	mono_ana_mosaic = 10.0;
	sample_idx = 100;
	sample_width = 0.004;
	sample_depth = 0.002;
	sample_d = 5.0;
	sample_b = 1.0;
	sample_m = 1.0;
	sample_vel = 1.5;

	Q = 0.2;							# 1/A
	dE = -phonon_disp(sample_vel, sample_m, Q, sample_d);		# meV

	print("Q = " + Q + " 1/A");
	print("E = " + dE + " meV");

	# -------------------------------------------------------------------------------- 
	# MIEZE stuff

	L_sample_ana = 1.0;
	L_ana_det = 1.0;
	L_mono_sample = 2.;
	L_mono_mieze = 0.5;

	L1 = 0.9;
	Ls = L_sample_ana + L_ana_det;
	L2 = Ls + L_mono_sample - L1 - L_mono_mieze;
	tau = 100.;		# ps

	f1f2 = mieze_f1f2(L1, L2, Ls, lam, tau);
	ideal_det_offs = mieze_det_offs(L1, L2-Ls, f1f2[0], f1f2[1], lam, -dE);

	print("Ideal detector offset: " + ideal_det_offs + " m");
	# -------------------------------------------------------------------------------- 



	# -------------------------------------------------------------------------------- 
	# TAS stuff

	k_i = lam2k(lam);
	E_i = k2E(k_i);
	mono_tt = get_mono_tt(k_i, mono_d/mono_order);

	# sample_d = mono_d/mono_order;
	# Q = get_mono_Q(sample_d);

	E_f = E_i - dE;
	k_f = E2k(E_f);
	lam_f = E2lam(E_f);

	sample_tt = get_tt(k_i, k_f, Q);
	#sample_tt = mono_tt;

	ana_tt = get_mono_tt(k_f, ana_d/ana_order);

	emon_range = abs(dE*2.);
	# --------------------------------------------------------------------------------




	
	if(do_compile)
	{
		mcclean(INSTR);
		if(not mccompile(INSTR))
			return;
	}


	simBaseParams = "dLam=" + lam 
			+ " dDeltaLam=" + dlam 
			+ " dMiezeF1=" + f1f2[0] 
			+ " dMiezeF2=" + f1f2[1]
			+ " dMiezeL1=" + L1
			+ " dDistMonoMieze=" + L_mono_mieze
			+ " dDistMonoSample=" +  L_mono_sample
			+ " dDistSampleAna=" + L_sample_ana
			+ " dDistAnaDet=" + L_ana_det
			+ " dMonoTheta=" + mono_tt/2 /pi*180.
			+ " dAnaTheta=" + ana_tt/2 /pi*180.
			+ " dSampleTheta=" + sample_tt/2 /pi*180.
			+ " dSampleTwoTheta=" + sample_tt /pi*180.
			+ " bAutoSetAngles=0" 
			+ " iSample=" + sample_idx
#			+ " dDetOffs=" + det_offs
			+ " dMonoD=" + mono_d
			+ " dAnaD=" + ana_d
			+ " dMonoOrder=" + mono_order
			+ " dAnaOrder=" + ana_order
			+ " dSampleWidth=" + sample_width
			+ " dSampleHeight=" + sample_width
			+ " dSampleDepth=" + sample_depth
			+ " dSampleD=" + sample_d
			+ " dSampleOrder=1.0"
			+ " dSampleB=" + sample_b
			+ " dSampleM=" + sample_m
			+ " dSamplePhononVel=" + sample_vel
			+ " dTemp=20"
			+ " dDeltaEMon=" + emon_range
			+ " dMonoWidth=" + mono_ana_width
			+ " dMonoHeight=" + mono_ana_width
			+ " dAnaWidth=" + mono_ana_width
			+ " dAnaHeight=" + mono_ana_width
			+ " dMonoMosaic=" + mono_ana_mosaic
			+ " dAnaMosaic=" + mono_ana_mosaic
			+ " bMonoIdeal=" + mono_ana_ideal
			+ " bAnaIdeal=" + mono_ana_ideal
			+ " dSourceWidth=" + source_width
			+ " dSourceHeight=" + source_width
			+ " dDetWidth=" + det_width
			+ " dDetHeight=" + det_width
			+ " dLam_f=" + lam_f;

	print("\n\n");
	print("="*80);
	print(BLUE + "Starting simulation..." + NOCOLOR);
	print("\n");

	det_offs = linspace(-0.8, 0.8, 16);
	indices = linspace(0, vec_size(det_offs)-1, vec_size(det_offs));
	global contrasts = vec(vec_size(det_offs));
	global contrasts_err = vec(vec_size(det_offs));


	threads = nthread(NUM_THREADS, "run_thread", zip(indices, det_offs), "dDetOffs", simBaseParams);
	join(threads);

	print("\n");
	print(GREEN + "All thread runs have finished." + NOCOLOR);
	print("="*80);

	params = map();
	params["xlabel"] = "Detector offset (mm)";
	params["ylabel"] = "Contrast";
	params["xlimits"] = 1000.*min(det_offs) + " " + 1000.*max(det_offs);
	params["ylimits"] = "0 1";
	params["term"] = "x11";

	det_offs_mm = det_offs*1000.;
	thefit = fit_gauss(det_offs_mm, contrasts, contrasts_err);
	print("Fit: " + str(thefit));

	fitx = linspace(min(det_offs_mm), max(det_offs_mm), 64);
	fity = gauss_model(fitx, *map_vec_to_val(thefit));

	params["title"] = "x0 = " + thefit["x0"][0] + " mm +- " + thefit["x0"][1] + " mm";

	plot([[det_offs_mm, contrasts, contrasts_err, params], [fitx, fity, ["style":"line"]]]);
}
