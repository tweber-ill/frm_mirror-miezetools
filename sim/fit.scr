__init__()
{
	global hwhm2sigma = 1./(sqrt(2.*log(2.)));
}

doublegauss_model(x, x0_0, sigma_0, amp_0, x0_1, sigma_1, amp_1, offs)
{
	return amp_0 * exp(-0.5 * ((x-x0_0) / sigma_0)^2.) 
		+ amp_1 * exp(-0.5 * ((x-x0_1) / sigma_1)^2.) 
		+ offs;
}

fit_doublegauss(x, y, yerr)
{
	peaks = find_peaks(x, y);
	#print("Peaks: " + str(peaks));

	peaks_x = peaks[0];
	peaks_size = peaks[1];
	peaks_width = peaks[2] * hwhm2sigma;

	if(length(peaks_x) less 2 or length(peaks_size) less 2 or length(peaks_width) less 2)
	{
		print("Error: Prefitter didn't find enough peaks.");
		return 0;
	}


	# Minuit doesn't handle errors == 0
	yrange = max(y)-min(y);
	for(thisyerr : yerr)
	{
		if(thisyerr eq 0.)
			thisyerr = yrange*0.001;
	}

	hints = [peaks_x[0], peaks_width[0], peaks_size[0], 
		peaks_x[1], peaks_width[1], peaks_size[1],
		min(y)];

	hints_err = [peaks_x[0]/10., peaks_width[0]/10., peaks_size[0]/10., 
		peaks_x[1]/10., peaks_width[1]/10., peaks_size[1]/10.,
		yrange/10.];

	#x_ = linspace(0., 10., 64);
	#y_ = doublegauss_model(x_, peaks_x[0], peaks_width[0], peaks_size[0], peaks_x[1], peaks_width[1], peaks_size[1], 0.);
	#plot(x_, y_, ["style":"line"]);

	#print("Hints: " + str(hints));

#	lowerlims = ["x0_0":peaks_x[0]*0.8., "x0_1":peaks_x[1]*0.8., "amp_0":peaks_size[0]*0.8., "amp_1":peaks_size[1]*0.8., "sigma_0":peaks_width[0]*0.8, "sigma_1":peaks_width[1]*0.8, "offs":min(y)];
#	upperlims = ["x0_0":peaks_x[0]*1.2, "x0_1":peaks_x[1]*1.2., "amp_0":peaks_size[0]*1.2., "amp_1":peaks_size[1]*1.2., "sigma_0":peaks_width[0]*1.2, "sigma_1":peaks_width[1]*1.2, "offs":max(y)];

	lowerlims = ["amp_0":min(y), "amp_1":min(y), "sigma_0":0., "sigma_1":0., "offs":min(y)];
	upperlims = ["amp_0":max(y), "amp_1":max(y), "offs":max(y)];

	fitparams = fit("doublegauss_model", x, y, yerr, 
			[
				"hints":hints, "hints_errors":hints_err,
				"lower_limits":lowerlims, "upper_limits":upperlims,
				"fixed":["offs"], "debug":1,
				"steps":["frrffff", "ffffrrf", "rfffffr", "fffrffr", "xxxxxxx"]
			]
			);

	return fitparams;
}
