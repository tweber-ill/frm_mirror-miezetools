#
# Mieze Calculations
# Author: TW
#

__init__()
{
	import("tas.scr");
}

plot_msin(num_osc, C, phase, amp, freq, offs, dat, dattof)
{
	x = linspace(min(dat[0]), max(dat[0]), 64);
#	xosc = linspace(0, num_osc*2.*pi, 64);
	y = sin_model(x, amp, phase, offs, freq);

	param = map();
	param["style"] = "line";
	param["title"] = "Contrast: " + C + ", Phase: " + phase;
	plot(dat, [x,y,param], ["window" : "0"]);

	plot(dattof, ["window" : "1"]);
}


# f2/f1 = L1/L2 + 1;
#
# f2-f1 = tau / (2. * Ls * h) * (m_n * v^3);	| : f1
# f2/f1 = tau / (2. * Ls * h * f1) * (m_n * v^3) + 1;
#
# L2/L1 / (2*Ls*h) * (m_n *v^3 * tau) = f1;

mieze_f2(L1, L2, f1)
{
	return (L1/L2 + 1.)*f1;
}

mieze_fm(tau, Ls, lam_A)
{
	v = lam2v(lam_A);

	fm = tau / (Ls * h) * (m_n * v^3);
	return fm;
}

mieze_f1f2(L1, L2, Ls, lam_A, tau_ps)
{
	tau = tau_ps * 1e-12;

	v = lam2v(lam_A);

	f1 = L2/L1 / (2 * Ls * 2.*pi*hbar) * (m_n *v^3 * tau);
	f2 = (L1/L2 + 1.)*f1;

	return [f1, f2];
}

sin_model(x, amp, phase, offs, freq)
{
	return amp*sin(freq*x + phase) + offs;
}

contrast(num_osc, datxy, dattof, want_plot)
{
	#print(datxy);
	f_M = 2.*2.*pi*(real(datxy[3]["param_dMiezeF2"]) - real(datxy[3]["param_dMiezeF1"])) * 1e-6;

	data = datxy[1];
	len = vec_size(data);

	data_fft = fft(data);
	real = 2.*data_fft[0][num_osc] / len;
	imag = 2.*data_fft[1][num_osc] / len;

	amp = sqrt(real^2 + imag^2);
	offs = data_fft[0][0] / len;

	phase = atan2(imag, real) + pi/2. - 2.*pi/2.*num_osc/len;
	phase = fmod(phase, 2.*pi);
	if(phase less 0.)
		phase = phase + 2.*pi;

	miny = min(datxy[1]);
	maxy = max(datxy[1]);
	#print("min y: " + miny + ", max y: " + maxy);

	hints = [amp, phase, offs, f_M];
	hints_errs = [amp/10., pi/10., offs/10., f_M/100.];
	lowerlims = ["amp":0., "offs":miny, "phase":0.];
	upperlims = ["amp":maxy, "offs":maxy, "phase":2.*pi];
	fitparam = fit("sin_model", datxy[0], datxy[1], datxy[2], 
				["hints":hints, "hints_errors":hints_errs,
				"lower_limits":lowerlims, "upper_limits":upperlims,
				"fixed":["freq"]]);

        params_vals = map_vec_to_val(fitparam, 0);
        params_errs = map_vec_to_val(fitparam, 1);

	amp = params_vals["amp"];
	amp_err = params_errs["amp"];

	phase = params_vals["phase"];
	phase_err = params_errs["phase"];

	offs = params_vals["offs"];
	offs_err = params_errs["offs"];

	C = amp / offs;
	C_err = sqrt((amp_err/offs)^2. + (-amp/offs^2. * offs_err)^2.);

	if(not isfinite(C))
	{
		C = 0.;
		C_err = 1.;
	}

#	print("Contrast: " + C + ", Phase: " + phase + ", Amplitude: " + amp + ", Offset: " + offs);

	if(want_plot)
		plot_msin(num_osc, C, phase, amp, f_M, offs, datxy, dattof);	

	return [[C, phase, amp, offs],
		[C_err, phase_err, amp_err, offs_err]];
}

mieze_det_offs(L_1, L_b, f_A, f_B, lam_A, dE_meV)
{
#	print("L1 = " + L_1 + "\nLb = " + L_b + "\nfA = " + f_A + "\nfB = " + f_B + "\nlam = " + lam_A + "\ndE = " + dE_meV + "\n");

	v_n = lam2v(lam_A);
	dE_J = dE_meV * 1e-3 * q_e;

	Ls_elast = f_A*L_1 / (f_B-f_A) - L_b;
	Ls_inelast = Ls_elast * (sqrt(v_n^2. + 2.*dE_J/m_n)/v_n)^3.;

	return Ls_inelast - Ls_elast;
}

