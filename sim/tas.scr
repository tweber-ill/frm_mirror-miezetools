#!./hermelin

__init__()
{
	global mono_d = 6.79/2.;
	global ana_d = 6.79/2.;
}

get_mono_tt(k, d)
{
	ttsin = pi / (d*k);
	if(abs(ttsin) greater 1.)
	{
		print("Error: Invalid monochromator/analyser angle.");
		exit(-1);
	}

	tt = 2.*asin(ttsin);
	return tt;
}

get_mono_Q(d)
{
	n = 1.;
	Q = n * 2.*pi / d;
	return Q;
}

get_tt(ki, kf, Q)
{
	ttcos = (ki*ki + kf*kf - Q*Q) / (2.*ki*kf);
	if(abs(ttcos) greater 1.)
	{
		print("Error: Scattering triangle not closed.");
		exit(-1);
	}

	tt = acos(ttcos);
	return tt;
}

lam2k(lam)
{
	return 2.*pi / lam;
}

lam2v(lam_A)
{
	lam = lam_A * 1e-10;
	p = hbar*2.*pi/lam;
	v = p/m_n;

	return v;
}

k2E(k)
{
	k = k*1e10;

	p = hbar*k;
	E = p^2. / (2. * m_n);

	E_meV = E/q_e * 1000.;
	return E_meV;
}

E2k(E_meV)
{
	imag = 0;
	if(E_meV less 0.)
		imag = 1;

	E = E_meV / 1000. * q_e;
	E = abs(E);

	p = sqrt(2.*m_n*E);
	k = p / hbar;
	return k / 1e10;
}

main()
{
	lam_i = real(input("lam_i [A] = "));
	k_i = lam2k(lam_i);
	E_i = k2E(k_i);
	mono_tt = get_mono_tt(k_i, mono_d);

	Q = real(input("Q [1/A] = "));
	dE = real(input("dE [meV] = "));

	E_f = E_i - dE;
	k_f = E2k(E_f);	

	tt = get_tt(k_i, k_f, Q);
	ana_tt = get_mono_tt(k_f, ana_d);


	print("\n" + "-"*80);
	print("k_i = " + k_i + " 1/A");
	print("E_i = " + E_i + " meV");

	print("k_f = " + k_f + " 1/A");
	print("E_f = " + E_f + " meV");

	print("2theta_mono = " + mono_tt/pi*180. + " deg");
	print("2theta_ana = " + ana_tt/pi*180. + " deg");
	print("2theta_sample = " + tt/pi*180. + " deg");
	print("-"*80);
}
