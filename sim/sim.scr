#!./hermelin

#
# Common routines for MIEZE sims
# Author: TW
#

__init__()
{
	global NUM_THREADS = thread_hwcount();
	print("CPU supports " + NUM_THREADS + " threads.\n");

	import("fit.scr");
	import("mieze.scr");
	import("tas.scr");
}

sim_evaluate(dir, show_plots)
{
	#dat = loadtxt(dir + "/oscpsd_1d.dat");
	if(file_exists(dir + "/oscpsd_sph_1d.sim"))
		dat = loadtxt(dir + "/oscpsd_sph_1d.sim");
	else if(file_exists(dir + "/oscpsd_sph_1d.dat"))
		dat = loadtxt(dir + "/oscpsd_sph_1d.dat");
	else
		return 0;

	dat = [dat[0], dat[1], dat[2], dat[4]];


	if(file_exists(dir + "/tof.sim"))
		dattof = loadtxt(dir + "/tof.sim");
	else if(file_exists(dir + "/tof.dat"))
		dattof = loadtxt(dir + "/tof.dat");
	else
		return 0;

	dattof = [dattof[0], dattof[1], dattof[2], dattof[4]];

	result = contrast(2, dat, dattof, show_plots);
	return result;
}


run_thread(params, param_name, baseparams, step_name)
{
	show_plots = NUM_THREADS eq 1;
	if(length(step_name) neq 0)
		step_name = step_name + "_";

	for(param : params)
	{
		idx = int(param[0]);
		the_param = param[1];

		simParams = baseparams + " " + param_name + "=" + the_param;
		dir = "output/" + step_name + param_name + "_iter_" + idx;

		if(mcrun(INSTR, num_neutrons, dir, simParams))
		{
			result = sim_evaluate(dir, show_plots);
			if(show_plots)
				eval_Emon(dir, 0);

			begin_critical();
			print(YELLOW + "Result for " + param_name + " = " + the_param + ": "
					+ str(result) + NOCOLOR);
			global contrasts[idx] = result[0][0];
			global contrasts_err[idx] = result[1][0];
			end_critical();
		}
	}
}


eval_Emon(dir, do_fit)
{
	if(file_exists(dir + "/E_mon_pre_ana.sim"))
		dat = loadtxt(dir + "/E_mon_pre_ana.sim");
	else if(file_exists(dir + "/E_mon_pre_ana.dat"))
		dat = loadtxt(dir + "/E_mon_pre_ana.dat");
	else
		return 0;

	dat[4]["legend"] = "before analyser";
	dat = [dat[0], dat[1], dat[2], dat[4]];

	if(file_exists(dir + "/E_mon_post_ana.sim"))
		dat_post = loadtxt(dir + "/E_mon_post_ana.sim");
	else if(file_exists(dir + "/E_mon_post_ana.dat"))
		dat_post = loadtxt(dir + "/E_mon_post_ana.dat");
	else
		return 0;

	dat_post[4]["legend"] = "after analyser";
	dat_post = [dat_post[0], dat_post[1], dat_post[2], dat_post[4]];


	plot_obj = vec(2);
	plot_obj[0] = dat;
	plot_obj[1] = dat_post;

	if(do_fit)
	{
		lam = real(dat[3]["param_dLam"]);
		E = k2E(lam2k(lam));
	
		print("lam_i = " + lam + "A\nE_i = " + E + " meV");
		print();

		dgauss = fit_doublegauss(dat[0], dat[1], dat[2], E);

	        params_vals = map_vec_to_val(dgauss);
	        params_errs = map_vec_to_val(dgauss, 1);

		print("Double Gaussian fit values: " + str(params_vals));
		print("Double Gaussian fit errors: " + str(params_errs));

	        fitx = linspace(min(dat[0]), max(dat[0]), 128);
	        fity = doublegauss_model(fitx, *params_vals);


		peak1 = params_vals["x0_0"];
		peak2 = params_vals["x0_1"];

		print();
		print("Peak E_1 = " + peak1 + ", dE_1 = " + (peak1 - E));
		print("Peak E_2 = " + peak2 + ", dE_2 = " + (peak2 - E));


		plot_obj[2] = [fitx, fity, ["style":"line"]];
	}

	plot(plot_obj, ["window":2]);
}


main()
{
	eval_Emon("output/single", 1);
}
