#!./hermelin

#
# Common routines for MIEZE sims
# Author: TW
#

__init__()
{
	global NUM_THREADS = thread_hwcount();
	print("CPU supports " + NUM_THREADS + " threads.\n");

	import("apps/fit.scr");
	import("apps/mieze.scr");
	import("tas.scr");
}


# -----------------------------------------------------------------------------
plot_msin(num_osc, C, phase, amp, freq, offs, dat, dattof)
{
	x = linspace(min(dat[0]), max(dat[0]), 64);
#	xosc = linspace(0, num_osc*2.*pi, 64);
	y = sin_model(x, amp, phase, offs, freq);

	param = map();
	param["style"] = "line";
	param["title"] = "Contrast: " + C + ", Phase: " + phase;
	plot(dat, [x,y,param], ["window" : "0"]);

	plot(dattof, ["window" : "1"]);
}

sin_model(x, amp, phase, offs, freq)
{
	return amp*sin(freq*x + phase) + offs;
}

contrast(num_osc, datxy, dattof, want_plot)
{
	#print(datxy);
	f_M = 2.*2.*pi*(real(datxy[3]["param_dMiezeF2"]) - real(datxy[3]["param_dMiezeF1"])) * 1e-6;

	data = datxy[1];
	len = vec_size(data);

	data_fft = fft(data);
	real = 2.*data_fft[0][num_osc] / len;
	imag = 2.*data_fft[1][num_osc] / len;

	amp = sqrt(real^2 + imag^2);
	offs = data_fft[0][0] / len;

	phase = atan2(imag, real) + pi/2. - 2.*pi/2.*num_osc/len;
	phase = fmod(phase, 2.*pi);
	if(phase less 0.)
		phase = phase + 2.*pi;

	miny = min(datxy[1]);
	maxy = max(datxy[1]);
	#print("min y: " + miny + ", max y: " + maxy);

	hints = [amp, phase, offs, f_M];
	hints_errs = [amp/10., pi/10., offs/10., f_M/100.];
	lowerlims = ["amp":0., "offs":miny, "phase":0.];
	upperlims = ["amp":maxy, "offs":maxy, "phase":2.*pi];
	fitparam = fit("sin_model", datxy[0], datxy[1], datxy[2], 
				["hints":hints, "hints_errors":hints_errs,
				"lower_limits":lowerlims, "upper_limits":upperlims,
				"fixed":["freq"]]);

        params_vals = map_vec_to_val(fitparam, 0);
        params_errs = map_vec_to_val(fitparam, 1);

	amp = params_vals["amp"];
	amp_err = params_errs["amp"];

	phase = params_vals["phase"];
	phase_err = params_errs["phase"];

	offs = params_vals["offs"];
	offs_err = params_errs["offs"];

	C = amp / offs;
	C_err = sqrt((amp_err/offs)^2. + (-amp/offs^2. * offs_err)^2.);

	if(not isfinite(C))
	{
		C = 0.;
		C_err = 1.;
	}

#	print("Contrast: " + C + ", Phase: " + phase + ", Amplitude: " + amp + ", Offset: " + offs);

	if(want_plot)
		plot_msin(num_osc, C, phase, amp, f_M, offs, datxy, dattof);	

	return [[C, phase, amp, offs],
		[C_err, phase_err, amp_err, offs_err]];
}
# -----------------------------------------------------------------------------



sim_evaluate(dir, show_plots)
{
	#oscfile = dir + "/oscpsd_1d";
	oscfile = dir + "/oscpsd_sph_1d";
	oscfile_sim = oscfile + ".sim";
	oscfile_dat = oscfile + ".dat";

	if(file_exists(oscfile_sim))
		dat = loadtxt(oscfile_sim);
	else if(file_exists(oscfile_dat))
		dat = loadtxt(oscfile_dat);
	else
		return 0;

	dat = [dat[0], dat[1], dat[2], dat[4]];


	if(file_exists(dir + "/tof.sim"))
		dattof = loadtxt(dir + "/tof.sim");
	else if(file_exists(dir + "/tof.dat"))
		dattof = loadtxt(dir + "/tof.dat");
	else
		return 0;

	dattof = [dattof[0], dattof[1], dattof[2], dattof[4]];

	result = contrast(2, dat, dattof, show_plots);
	return result;
}


# scan over 1 parameter
run_thread(params, param_name, baseparams, step_name)
{
	show_plots = NUM_THREADS eq 1;
	if(length(step_name) neq 0)
		step_name = step_name + "_";

	for(param : params)
	{
		idx = int(param[0]);
		the_param = param[1];

		simParams = baseparams + " " + param_name + "=" + the_param;
		dir = "output/" + step_name + param_name + "_iter_" + idx;

		if(mcrun(INSTR, num_neutrons, dir, simParams))
		{
			result = sim_evaluate(dir, show_plots);
			if(show_plots)
				eval_Emon(dir, 0);

			begin_critical();
			print(YELLOW + "Result for " + param_name + " = " + the_param + ": "
					+ str(result) + NOCOLOR);
			global contrasts[idx] = result[0][0];
			global contrasts_err[idx] = result[1][0];
			end_critical();
		}
	}
}

# scan over multiple parameters
run_thread_multi(params, param_names, baseparams, step_name)
{
	show_plots = NUM_THREADS eq 1;
	if(length(step_name) neq 0)
		step_name = step_name + "_";

	for(param : params)
	{
		#print(param);
		idx = int(param[0]);
		the_params = param[1];

		simParams = baseparams;
		for(param_name : param_names)
		{
			param_val = the_params[cur_iter(param_name)];
			#print("Param: " + param_name + ", value: " + param_val);
			simParams += " " + param_name + "=" + param_val;
		}
		dir = "output/" + step_name + "_iter_" + idx;

		if(mcrun(INSTR, num_neutrons, dir, simParams))
		{
			result = sim_evaluate(dir, show_plots);
			if(show_plots)
				eval_Emon(dir, 0);

			begin_critical();
			print(YELLOW + "Result for " + str(param_names) + " = " 
					+ str(the_params) + ": "
					+ str(result) + NOCOLOR);
			global contrasts[idx] = result[0][0];
			global contrasts_err[idx] = result[1][0];
			end_critical();
		}
	}
}


eval_Emon(dir, do_fit)
{
	if(file_exists(dir + "/E_mon_pre_ana.sim"))
		dat = loadtxt(dir + "/E_mon_pre_ana.sim");
	else if(file_exists(dir + "/E_mon_pre_ana.dat"))
		dat = loadtxt(dir + "/E_mon_pre_ana.dat");
	else
		return 0;

	dat[4]["legend"] = "before analyser";
	dat = [dat[0], dat[1], dat[2], dat[4]];

	if(file_exists(dir + "/E_mon_post_ana.sim"))
		dat_post = loadtxt(dir + "/E_mon_post_ana.sim");
	else if(file_exists(dir + "/E_mon_post_ana.dat"))
		dat_post = loadtxt(dir + "/E_mon_post_ana.dat");
	else
		return 0;

	dat_post[4]["legend"] = "after analyser";
	dat_post = [dat_post[0], dat_post[1], dat_post[2], dat_post[4]];


	plot_obj = vec(2);
	plot_obj[0] = dat;
	plot_obj[1] = dat_post;

	if(do_fit)
	{
		lam = real(dat[3]["param_dLam"]);
		E = k2E(lam2k(lam));
	
		print("lam_i = " + lam + "A\nE_i = " + E + " meV");
		print();

		dgauss = fit_doublegauss(dat[0], dat[1], dat[2], E);

	        params_vals = map_vec_to_val(dgauss);
	        params_errs = map_vec_to_val(dgauss, 1);

		print("Double Gaussian fit values: " + str(params_vals));
		print("Double Gaussian fit errors: " + str(params_errs));

	        fitx = linspace(min(dat[0]), max(dat[0]), 128);
	        fity = doublegauss_model(fitx, *params_vals);


		peak1 = params_vals["x0_0"];
		peak2 = params_vals["x0_1"];

		print();
		print("Peak E_1 = " + peak1 + ", dE_1 = " + (peak1 - E));
		print("Peak E_2 = " + peak2 + ", dE_2 = " + (peak2 - E));


		plot_obj[2] = [fitx, fity, ["style":"line"]];
	}

	plot(plot_obj, ["window":2]);
}


main()
{
	eval_Emon("output/single", 1);
}
