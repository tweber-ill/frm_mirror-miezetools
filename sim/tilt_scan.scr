#!./hermelin

#
# tilt scan
# @author: tw
#

__init__()
{
#	global INSTR = "tasmieze";
#	global INSTR = "tasmieze_nomono";
	global INSTR = "tasmieze_esstst";
	global num_neutrons = 1e6;

	print("Running on " + interp_ver());

	import("apps/mcstas.scr");
	import("apps/colors.scr");
	import("apps/phonon_1atom.scr");
	import("sim.scr");
}

main()
{
#	global NUM_THREADS = 1;
	do_compile = 1;
	use_cpp = 0;

	lam = 4.;		# A
	dlam = 0.01 * lam;

	mono_ana_ideal = 0;
	mieze_ideal = 0;

	source_width = 0.001;
	det_width = 0.02;
	mono_ana_width = 0.005;
	mono_ana_mosaic = 30.0;
	sample_idx = 100;
	sample_width = 0.004;
	sample_depth = 0.002;
	sample_d = 5.0;
	sample_b = 1.0;
	sample_m = 1.0;
	sample_vel = 20.;


	q_rlu = 0.05;						# rlu
	#Q = 2.* 2.*pi/sample_d + 0.01;				# 1/A
	q = q_rlu * 2.*pi/sample_d;
	dE = -phonon_disp(sample_vel, sample_m, q, sample_d);	# meV

	k_i = lam2k(lam);
	E_i = k2E(k_i);

	E_f = E_i - dE;
	k_f = E2k(E_f);
	lam_f = E2lam(E_f);

	[theta_m, theta_a, theta_s, ttheta_s] = hkl2tas(sample_d,sample_d,sample_d, pi/2.,pi/2.,pi/2., 
							[1.,0.,0.],[0.,1.,0.], 2.,q_rlu,0., 
							k_i,k_f, mono_d/mono_order,ana_d/ana_order);
	theta_m = -theta_m;
	theta_a = -theta_a;


	print("q = " + q + " 1/A");
	print("E = " + dE + " meV");

	emon_range = abs(dE*2.);
	

	# -------------------------------------------------------------------------------- 
	# MIEZE stuff
	L_sample_ana = 0.5;
	L_ana_det = 0.5;
	L_mono_sample = 2.;
	L_mono_mieze = 0.5;
	coil_wh = 0.75;

	L1 = 0.9;
	Ls = L_sample_ana + L_ana_det;
	L2 = Ls + L_mono_sample - L1 - L_mono_mieze;

	tau = 25.;
	f1f2 = mieze_f1f2(L1, L2, Ls, lam, tau);
	det_offs = mieze_det_offs(L1, L2-Ls, f1f2[0], f1f2[1], lam, -dE);

	print("det_offs = " + det_offs + " m");
	# -------------------------------------------------------------------------------- 




	
	if(do_compile)
	{
		mcclean(INSTR);
		if(not mccompile(INSTR))
			return;
	}



	tilts = linspace(-20., 20., 24);
	indices = linspace(0, vec_size(tilts)-1, vec_size(tilts));
	global contrasts = vec(vec_size(tilts));
	global contrasts_err = vec(vec_size(tilts));
	totalsimcount = length(tilts);


	simBaseParams = "dLam=" + lam 
			+ " dDeltaLam=" + dlam 
			+ " dMiezeF1=" + f1f2[0] 
			+ " dMiezeF2=" + f1f2[1]
			+ " dMiezeL1=" + L1
			+ " dMiezeWidth=" + coil_wh
			+ " dMiezeHeight=" + coil_wh
			+ " dDistMonoMieze=" + L_mono_mieze
			+ " dDistMonoSample=" +  L_mono_sample
			+ " dDistSampleAna=" + L_sample_ana
			+ " dDistAnaDet=" + L_ana_det
			+ " dMonoTheta=" + theta_m /pi*180.
			+ " dAnaTheta=" + theta_a /pi*180.
			+ " dSampleTheta=" + theta_s /pi*180.
			+ " dSampleTwoTheta=" + ttheta_s /pi*180.
			+ " bAutoSetAngles=0" 
			+ " iSample=" + sample_idx
			+ " dDetOffs=" + det_offs
			+ " dMonoD=" + mono_d
			+ " dAnaD=" + ana_d
			+ " dMonoOrder=" + mono_order
			+ " dAnaOrder=" + ana_order
			+ " dSampleWidth=" + sample_width
			+ " dSampleHeight=" + sample_width
			+ " dSampleDepth=" + sample_depth
			+ " dSampleD=" + sample_d
			+ " dSampleOrder=1.0"
			+ " dSampleB=" + sample_b
			+ " dSampleM=" + sample_m
			+ " dSamplePhononVel=" + sample_vel
			+ " dTemp=100"
			+ " dDeltaEMon=" + emon_range
			+ " dMonoWidth=" + mono_ana_width
			+ " dMonoHeight=" + mono_ana_width
			+ " dAnaWidth=" + mono_ana_width
			+ " dAnaHeight=" + mono_ana_width
			+ " dMonoMosaic=" + mono_ana_mosaic
			+ " dAnaMosaic=" + mono_ana_mosaic
			+ " bMonoIdeal=" + mono_ana_ideal
			+ " bAnaIdeal=" + mono_ana_ideal
			+ " bMiezeIdeal=" + mieze_ideal
			+ " dSourceWidth=" + source_width
			+ " dSourceHeight=" + source_width
			+ " dDetWidth=" + det_width
			+ " dDetHeight=" + det_width
			+ " dLam_f=" + lam_f;



	print("\n\n");
	print("="*80);
	print(BLUE + "Starting simulation in " + NUM_THREADS + " threads." + NOCOLOR);
	print("\n");



	threads = nthread(NUM_THREADS, "run_thread", zip(indices, tilts), "dMiezeCoilTilt", simBaseParams, "tilt");
	join(threads);




	print("\n");
	print(GREEN + "All thread runs have finished." + NOCOLOR);
	print("="*80);


	print("Tilt angles: " + str(tilts));
	print("Contrasts: " + str(contrasts));
        
	params = map();
	params["xlabel"] = "Tilt angle (deg)";
	params["ylabel"] = "Contrast";
	params["title"] = "Result";
	params["xlimits"] = min(tilts) + " " + max(tilts);
	params["ylimits"] = "0 1";
	params["term"] = "x11";

	savetxt("output/tilt.dat", [tilts, contrasts, contrasts_err, params]);
	plot(tilts, contrasts, contrasts_err, params);
}
